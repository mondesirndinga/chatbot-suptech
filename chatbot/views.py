from django.shortcuts import render, redirect
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from .models import ChatInteraction
from .services import ChatbotService
from .forms import CustomUserCreationForm, CustomLoginForm
from django.contrib.auth.models import User
from django.contrib.auth import login, authenticate
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from .models import CustomUser
from .utils import get_chatbot_response
import traceback
from rest_framework.decorators import api_view
from rest_framework.response import Response
from chatbot.models import Formation
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
import json

def chat_view(request):
    return render(request, 'chatbot/chat.html')

import unidecode

@csrf_exempt
@login_required
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def chat_api(request):
    message = request.data.get('message', '').lower()
    message_clean = unidecode.unidecode(message)  # supprime les accents pour comparaison souple

        # üëá R√©ponse personnalis√©e pour "bonjour" ou "bonsoir"
    if "bonjour" in message_clean:
        return Response({
            "status": "success",
            "response": "Bonjour je suis l'assistant d'orientation de Suptech con√ßu par Parolien et Mondesir. Quelle formation voulez-vous ?"
        })

    if "bonsoir" in message_clean:
        return Response({
            "status": "success",
            "response": "Bonsoir je suis l'assistant d'orientation de Suptech con√ßu par Parolien et Mondesir. Quelle formation voulez-vous ?"
        })


    try:
        # R√©ponses personnalis√©es robustes (d√©tection souple sans accents)
        if "mastere professionnel" in message_clean and "cyber securite" in message_clean:
            return Response({
                "status": "success",
                "response": """<p style='color:#003366; font-weight:bold;'>Mast√®re Professionnel en Cyber s√©curit√©</p>
<p>OBJECTIF: Vous souhaitez d√©crocher un poste dans une entreprise sp√©cialis√©e en s√©curit√© informatique, cyber s√©curit√© ou Audit ?</p>
<p>Vous r√™vez d'√™tre un expert en cyber s√©curit√© ?</p>
<p>SUPTECH vous propose le mast√®re professionnel en Cyber S√©curit√©.</p><br>
<p style='font-weight:bold;'>CONDITIONS D'ADMISSION :</p>
<ul>
<li>Niveau M1 : Les √©tudiants titulaires de licences en sciences et techniques, en math√©matiques ou en informatique.</li>
<li>Niveau M2 : Les √©tudiants qui ont valid√© le M1 en Cyber s√©curit√© ou le M1 d'un mast√®re √©quivalent.</li>
</ul>
<p style='font-weight:bold;'>Poursuites d'√©tudes :</p>
<ul>
<li>Mast√®re sp√©cialis√©</li>
<li>Doctorat en s√©curit√© informatique</li>
<li>Doctorat en syst√®mes d'information</li>
<li>Formation continue en s√©curit√© IT</li>
<li>Certifications professionnelles (CISSP, CISA, etc.)</li>
</ul>
<p style='font-weight:bold;'>D√©bouch√©s :</p>
<ul>
<li>Expert en cybers√©curit√©</li>
<li>Auditeur s√©curit√©</li>
<li>Analyste SOC</li>
<li>RSSI</li>
<li>Consultant s√©curit√© IT</li>
</ul>"""
            })

        if "mastere professionnel" in message_clean and "data science" in message_clean:
            return Response({
                "status": "success",
                "response": """<p style='color:#003366; font-weight:bold;'>Mast√®re Professionnel en Data Science</p>
<p>OBJECTIF: Vous voulez int√©grer des √©tablissements disposant d'une fouille de donn√©es massives ?</p>
<p>Op√©rer en tant qu'analyste des donn√©es, Expert IT ou consultant SAAS ?</p>
<p>SUPTECH vous propose le nouveau mast√®re professionnel en Data Science, c'est le dipl√¥me qu'il vous faut pour saisir de nouvelles opportunit√©s de carri√®re.</p><br>
<p style='font-weight:bold;'>CONDITIONS D'ADMISSION :</p>
<ul>
<li>Niveau M1 : Les √©tudiants titulaires de licences en sciences et techniques, en math√©matiques ou en informatique.</li>
<li>Niveau M2 : Les √©tudiants qui ont valid√© le M1 en Data Science ou le M1 d'un mast√®re √©quivalent.</li>
</ul>
<p style='font-weight:bold;'>Poursuites d'√©tudes :</p>
<ul>
<li>Mast√®re sp√©cialis√©</li>
<li>Doctorat en data science</li>
<li>Doctorat en intelligence artificielle</li>
<li>Certifications professionnelles (TensorFlow, Python, etc.)</li>
<li>Formation continue en machine learning</li>
</ul>
<p style='font-weight:bold;'>D√©bouch√©s :</p>
<ul>
<li>Data scientist</li>
<li>Analyste big data</li>
<li>Ing√©nieur machine learning</li>
<li>Consultant IA</li>
<li>Expert en intelligence artificielle</li>
</ul>"""
            })

        if "mastere professionnel" in message_clean and "logistique" in message_clean and "transport" in message_clean:
            return Response({
                "status": "success",
                "response": """<p style='color:#003366; font-weight:bold;'>Mast√®re Professionnel en Logistique du Transport et le D√©veloppement Durable</p>
<p>OBJECTIF: Vous souhaitez √™tre un Analyste de mobilit√© urbaine ou de trafic urbain ?</p>
<p>Le domaine de la logistique du transport vous int√©resse ?</p>
<p>SUPTECH vous accompagne et vous apporte le soutien indispensable √† la r√©ussite de votre formation avec le mast√®re professionnel en Logistique du Transport et le D√©veloppement Durable.</p><br>
<p style='font-weight:bold;'>CONDITIONS D'ADMISSION :</p>
<ul>
<li>Niveau M1 : Les √©tudiants titulaires de licences ou ma√Ætrise en √©conomie/gestion dans les diff√©rentes sp√©cialit√©s (Finance, √âconomie, Management, Marketing, GRH...).</li>
<li>Niveau M2 : Les √©tudiants qui ont valid√© le M1 en Logistique du Transport et le D√©veloppement Durable ou le M1 d'un mast√®re √©quivalent apr√®s √©tude de dossier par la commission d'admission.</li>
</ul>
<p style='font-weight:bold;'>Poursuites d'√©tudes :</p>
<ul>
<li>Mast√®re sp√©cialis√© en logistique</li>
<li>Doctorat en logistique et transport</li>
<li>Certifications en gestion de la supply chain</li>
<li>Formation continue en management logistique</li>
<li>Pr√©paration √† des concours en transport</li>
</ul>
<p style='font-weight:bold;'>D√©bouch√©s :</p>
<ul>
<li>Responsable logistique</li>
<li>Planificateur transport</li>
<li>Analyste mobilit√©</li>
<li>Consultant en logistique</li>
<li>Manager supply chain</li>
</ul>"""
            })

        # D√©tection des demandes de d√©bouch√©s et poursuites d'√©tudes combin√©es
        if any(word in message_clean for word in ["poursuite", "que faire apr√®s", "d√©bouch√©s", "d√©bouch√©", "carri√®re", "m√©tiers", "emplois", "avenir professionnel", "opportunit√©"]):

            if "licence" in message_clean:
                return Response({
                    "status": "success",
                    "response": """<p><strong>Poursuites apr√®s une Licence :</strong><br>
                    Mast√®re professionnel, pr√©paration concours, insertion professionnelle selon sp√©cialit√©.
                    <br><br><strong>D√©bouch√©s apr√®s une Licence :</strong><br>
                    Charg√© de mission, Assistant manager, Technicien, etc.
                    </p>"""
                })

            elif "mastere" in message_clean or "mast√®re" in message_clean:
                return Response({
                    "status": "success",
                    "response": """<p><strong>Poursuites apr√®s un Mast√®re :</strong><br>
                    Doctorat (si admissible), insertion dans le secteur priv√© ou public selon sp√©cialit√©.
                    <br><br><strong>D√©bouch√©s apr√®s un Mast√®re :</strong><br>
                    Chef de projet, Consultant, Ing√©nieur, Expert en informatique, etc.
                    </p>"""
                })

            elif "ingenieur" in message_clean or "ing√©nieur" in message_clean:
                return Response({
                    "status": "success",
                    "response": """<p><strong>Poursuites apr√®s un dipl√¥me d‚Äôing√©nieur :</strong><br>
                    Sp√©cialisation, mast√®re sp√©cialis√©, MBA, doctorat, etc.
                    <br><br><strong>D√©bouch√©s apr√®s un dipl√¥me d‚Äôing√©nieur :</strong><br>
                    Ing√©nieur R&D, Chef de projet, Consultant, etc.
                    </p>"""
                })

        # D√©tection des conditions d'admission
        if "condition d'admission" in message_clean or "conditions d'admission" in message_clean:
            if "licence 1" in message_clean or "l1" in message_clean:
                return Response({
                    "status": "success",
                    "response": """<p><strong>Conditions d'admission ‚Äì Licence 1 :</strong><br>
                    Baccalaur√©at toutes s√©ries ou √©quivalent reconnu.</p>"""
                })
            elif "mastere" in message_clean or "mast√®re" in message_clean:
                return Response({
                    "status": "success",
                    "response": """<p><strong>Conditions d'admission ‚Äì Mast√®re :</strong><br>
                    M1 : Licence scientifique/technique ou √©quivalent. M2 : M1 valid√© dans le m√™me domaine ou √©quivalent apr√®s √©tude du dossier.</p>"""
                })
            elif "ing√©nieur" in message_clean or "cycle ing√©nieur" in message_clean:
                return Response({
                    "status": "success",
                    "response": """<p><strong>Conditions d'admission ‚Äì Cycle ing√©nieur :</strong><br>
                    Acc√®s apr√®s classes pr√©paratoires, DUT, BTS, ou licence scientifique selon sp√©cialit√©, avec √©tude du dossier ou concours.</p>"""
                })

                

        # Logique de d√©tection classique
        types = ['licence', 'mastere', 'mast√®re', 'ingenieur', 'ing√©nieur']
        domaines = ['informatique', 'gestion', 'telecom', 't√©l√©com', 'droit']

        type_detecte = next((t for t in types if t in message), None)
        domaine_detecte = next((d for d in domaines if d in message), None)

        # Normalisation
        if type_detecte in ['mast√®re', 'mastere']:
            type_detecte = 'mast√®re'
        if type_detecte in ['ingenieur', 'ing√©nieur']:
            type_detecte = 'ing√©nieur'
        if domaine_detecte == 't√©l√©com':
            domaine_detecte = 'telecom'

        # Requ√™te dynamique insensible √† la casse avec distinct
        formations = Formation.objects.all()
        if type_detecte:
            formations = formations.filter(type__icontains=type_detecte)
        if domaine_detecte:
            formations = formations.filter(domaine__icontains=domaine_detecte)

        noms = list(set(f.nom for f in formations))  # suppression des doublons

        if noms:
            html_response = "<p style='color:#003366; font-weight:bold;'>Voici les formations correspondantes :</p><ul style='padding-left: 20px;'>"
            for nom in noms:
                html_response += f"<li style='margin-bottom: 6px; color: #003366;'>{nom}</li>"
            html_response += "</ul>"

            return Response({
                "status": "success",
                "response": html_response
            })
        else:
            return Response({
                "status": "success",
                "response": "<p style='color: #b30000;'>Je n‚Äôai pas trouv√© de formation correspondant √† ta demande.</p>"
            })

    except Exception as e:
        return Response({
            "status": "error",
            "response": f"<p style='color:red;'>Erreur serveur : {str(e)}</p>"
        }, status=500)









def register_view(request):
    if request.method == 'POST':
        username = request.POST['username']
        email = request.POST['email']
        password = request.POST['password']
        first_name = request.POST['first_name']
        last_name = request.POST['last_name']
        age = request.POST['age']
        current_class = request.POST['classe']  # <-- ce champ HTML est "classe"
        formation = request.POST['formation']

        if CustomUser.objects.filter(username=username).exists():
            messages.error(request, "Nom d'utilisateur d√©j√† utilis√©.")
            return redirect('register')

        if CustomUser.objects.filter(email=email).exists():
            messages.error(request, "Adresse e-mail d√©j√† utilis√©e.")
            return redirect('register')

        user = CustomUser.objects.create_user(
            username=username,
            email=email,
            password=password,
            first_name=first_name,
            last_name=last_name,
            age=age,
            current_class=current_class,  # <-- utilise le vrai nom du champ
            formation=formation
        )
        messages.success(request, "Inscription r√©ussie avec sucess")
        return redirect('login')

    return render(request, 'register.html')

def login_view(request):
    if request.method == 'POST':
        identifier = request.POST.get('identifier', '')
        password = request.POST.get('password', '')

        # V√©rifie si l'identifiant est un email ou un nom d'utilisateur
        from django.contrib.auth import get_user_model
        User = get_user_model()
        try:
            user = User.objects.get(email=identifier)
            username = user.username
        except User.DoesNotExist:
            username = identifier

        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('chat')  # Remplace 'chatbot' par le nom exact de ta page chatbot
        else:
            messages.error(request, "Identifiants invalides. Veuillez r√©essayer.")

    return render(request, 'login.html')
    
    from django.contrib.auth import logout
from django.shortcuts import redirect

def logout_view(request):
    logout(request)
    return redirect('login')


@login_required(login_url='login')
def chatbot_view(request):
    return render(request, 'chatbot/chat.html')



